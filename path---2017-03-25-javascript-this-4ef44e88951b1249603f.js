webpackJsonp([0x85aeba75f784],{370:function(n,t){n.exports={data:{markdownRemark:{tableOfContents:'<ul>\n<li>\n<p><a href="#%E5%85%A8%E5%B1%80%E4%B8%8A%E4%B8%8B%E6%96%87">全局上下文</a></p>\n<ul>\n<li><a href="#%E7%80%8F%E8%A6%BD%E5%99%A8">瀏覽器</a></li>\n<li><a href="#nodejs">Node.js</a></li>\n</ul>\n</li>\n<li><a href="#%E5%95%8F%E9%A1%8C">問題</a></li>\n<li><a href="#%E5%BB%B6%E4%BC%B8%E6%80%9D%E8%80%83">延伸思考</a></li>\n<li><a href="#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99">參考資料</a></li>\n</ul>',internal:{content:"---\ntitle: JavaScript的this\ndate: 2017-03-25 12:44:00\ntags:\n  - JavaScript\n---\n首先我們要理解調用函數的方法，最起碼可以用下面兩個方法：\n```JavaScript\nfunc(arg1, arg2);\nfunc.call(context, arg1, arg2);\n```\n之前我也沒怎麼見過後者，基本上都是直接call func的。後者`func(arg1, arg2)` 等於 `func.call(undefined, arg1, arg2)`。簡單來說，this就是context。如果context沒有定義的話，它會被定義為一個全局對象，比如說global。在MDN的文檔有這一句: `if the method is a function in non-strict mode code, null and undefined will be replaced with the global object and primitive values will be converted to objects`。\n\n如果不想要this是global的話，給予context一個對象就可以了：\n`func.call(obj, arg1, arg2)`\n\n## 全局上下文\n在全局中，無論是否在嚴格模式下(Strict mode)，`this`都是代表全局對象。\n\n### 瀏覽器\n1. `this.document`指向`document`\n1. 全局對象為`window`\n\n### Node.js\n全局對象為`global`\n\n直接運用函數的話，this會指向global。\n```JavaScript\nfunction test() {\n  this.x = 1;\n}\n\ntest();\n\nconsole.log(this.x); // 1\n```\n\n如果是生成一個對象的話，this會指向這個對象而不是global。\n```JavaScript\nfunction Car() {\n  this.color = 'red';\n}\n\nvar c = new Car();\n\nconsole.log(this.color); // undefined\nconsole.log(c.color); // red\n```\n\n下次遇到問題的話，我還是MDN資料吧，裡面寫得很詳細。\n\n## 問題\n在Node.js中，為什麼this.global === this.global.global的返回值為true？\n\n## 延伸思考\n1. Function.prototype.apply()和call()方法有什麼不同\n1. Function.prototype.bind()\n\n## 參考資料\n1. [this - MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this)\n1. [Function.prototype.call - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call)\n"},frontmatter:{title:"JavaScript的this"}}},pathContext:{slug:"/javascript-this/"}}}});
//# sourceMappingURL=path---2017-03-25-javascript-this-4ef44e88951b1249603f.js.map