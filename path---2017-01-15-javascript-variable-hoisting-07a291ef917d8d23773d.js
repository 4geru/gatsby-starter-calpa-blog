webpackJsonp([0x9be19e54da00],{380:function(n,a){n.exports={data:{markdownRemark:{tableOfContents:"",internal:{content:"---\ntitle: JavaScript的變量提升入門\ndate: 2017-01-14 20:09:35\ntags: JavaScript\n---\n在JavaScript中，hoisting是一個容易犯錯的地方。\n在一段scope裡面，沒有定義變量就使用變量的話會彈出Reference Error。\n```[js]\n // ReferenceError: poi is not defined\nconsole.log(poi);\n```\n---\n```[js]\nvar name;\nconsole.log(name); // undefined\nname = 'calpa'\nconsole.log(name); // calpa\n```\n由於JavaScript的解釋器會提前把所有變量函數定義，所以上面這一段代碼會變成這一段：\n```[js]\nconsole.log(name); // undefined\nvar name = 'calpa';\nconsole.log(name); // calpa\n```\n另外，JavaScript也會出現這樣的問題。。。\n```[js]\nvar name = 'calpa';\n(function () {\n    // My name is undefined\n    console.log(\"My name is \" + name);\n    var name = 'poi';\n    // My name is poi\n    console.log(\"My name is \" + name); // poi\n})();\n```\n簡單來說，在寫JavaScript時，我們應該提前在檔案開始位置定義變量。\n\n---\n參考資料：\n1. [Variable and Function Hoisting in JavaScript](http://adripofJavaScript.com/blog/drips/variable-and-function-hoisting)\n1. [JavaScript 中的变量和函数提升](http://jinlong.github.io/2013/09/11/var-and-fun-hoisting/)\n"},frontmatter:{title:"JavaScript的變量提升入門"}}},pathContext:{slug:"/javascript-variable-hoisting/"}}}});
//# sourceMappingURL=path---2017-01-15-javascript-variable-hoisting-07a291ef917d8d23773d.js.map